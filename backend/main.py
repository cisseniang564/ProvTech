"""
Point d'entr√©e principal de l'API FastAPI
Simulateur de Provisionnement Actuariel SaaS
"""

from fastapi import FastAPI, Request, status, Depends, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
import logging
import time
from datetime import datetime, timedelta
from contextlib import asynccontextmanager
import jwt
import bcrypt
import uuid

# Import des routers existants
from app.api.v1 import auth, triangles, calculations, exports, compliance, benchmarking
from app.core.config import settings
from app.core.database import engine, db_manager, health_check_db
from app.api.v1 import triangles_simple, calculations_simple
from app.api.v1 import results

# ===== NOUVEAUX IMPORTS R√âGLEMENTAIRES =====
try:
    from app.api.v1 import regulatory_dashboard, workflow, regulatory_controls
    REGULATORY_MODULES_AVAILABLE = True
    logger.info("üìã Modules r√©glementaires disponibles")
except ImportError as e:
    REGULATORY_MODULES_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è Modules r√©glementaires non disponibles: {e}")

# Configuration du logging
logging.basicConfig(
    level=logging.INFO if settings.ENVIRONMENT == "production" else logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ===== CONFIGURATION AUTHENTIFICATION HYBRIDE =====
JWT_SECRET = "your-super-secret-jwt-key-change-in-production"
JWT_ALGORITHM = "HS256"
JWT_EXPIRE_HOURS = 1
security = HTTPBearer()

# Base de donn√©es utilisateurs simul√©e (√† remplacer par votre vraie DB)
USERS_DB = [
    {
        "id": 1,
        "email": "admin@provtech.com",
        "password": bcrypt.hashpw("Admin123!".encode('utf-8'), bcrypt.gensalt()).decode('utf-8'),
        "first_name": "Admin",
        "last_name": "ProvTech",
        "role": "ADMIN",
        "permissions": ["triangles:read", "triangles:write", "compliance:read", "governance:read", "modeling:read"],
        "created_at": datetime.utcnow().isoformat(),
    },
    {
        "id": 2,
        "email": "actuaire@provtech.com", 
        "password": bcrypt.hashpw("Actuaire123!".encode('utf-8'), bcrypt.gensalt()).decode('utf-8'),
        "first_name": "Jean",
        "last_name": "Dupont",
        "role": "ACTUAIRE_SENIOR",
        "permissions": ["triangles:read", "calculations:read", "compliance:read"],
        "created_at": datetime.utcnow().isoformat(),
    }
]

def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """V√©rifier un token JWT pour les routes prot√©g√©es"""
    try:
        payload = jwt.decode(credentials.credentials, JWT_SECRET, algorithms=[JWT_ALGORITHM])
        user_id: int = payload.get("user_id")
        if user_id is None:
            raise HTTPException(status_code=401, detail="Token invalide")
        return payload
    except jwt.PyJWTError:
        raise HTTPException(status_code=401, detail="Token invalide")

# ============================================================================
# LIFESPAN EVENTS
# ============================================================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gestion du cycle de vie de l'application
    """
    # Startup
    logger.info("üöÄ D√©marrage de l'application...")
    logger.info("üìã Syst√®me de Conformit√© R√©glementaire IFRS 17 & Solvabilit√© II")
    
    # V√©rifier la connexion DB
    db_status = health_check_db()
    if db_status["status"] == "healthy":
        logger.info("‚úÖ Base de donn√©es connect√©e")
    else:
        logger.error("‚ùå Erreur connexion base de donn√©es")
    
    # Cr√©er les tables si n√©cessaire (dev only)
    if settings.ENVIRONMENT == "development":
        try:
            db_manager.create_all_tables()
            logger.info("‚úÖ Tables v√©rifi√©es/cr√©√©es")
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation tables: {e}")
    
    # Status des modules r√©glementaires
    if REGULATORY_MODULES_AVAILABLE:
        logger.info("‚úÖ Modules r√©glementaires activ√©s")
    else:
        logger.warning("‚ö†Ô∏è Modules r√©glementaires d√©sactiv√©s")
    
    yield
    
    # Shutdown
    logger.info("üëã Arr√™t de l'application...")
    
    # Nettoyer les ressources
    engine.dispose()
    logger.info("‚úÖ Connexions DB ferm√©es")

# ============================================================================
# APPLICATION FASTAPI
# ============================================================================

app = FastAPI(
    title="Actuarial Provisioning SaaS - Conformit√© R√©glementaire",
    description="API pour le calcul de provisions actuarielles avec support IFRS 17, Solvabilit√© II et conformit√© r√©glementaire compl√®te",
    version="1.1.0",  # Version mise √† jour
    docs_url="/docs" if settings.SHOW_DOCS else None,
    redoc_url="/redoc" if settings.SHOW_DOCS else None,
    lifespan=lifespan,
    openapi_tags=[
        {"name": "Authentication", "description": "Gestion de l'authentification"},
        {"name": "Triangles", "description": "Gestion des triangles de d√©veloppement"},
        {"name": "Calculations", "description": "Calculs actuariels"},
        {"name": "Compliance", "description": "Conformit√© r√©glementaire"},
        {"name": "Regulatory Dashboard", "description": "Dashboard r√©glementaire unifi√©"},
        {"name": "Workflow", "description": "Workflows d'approbation multi-niveaux"},
        {"name": "Regulatory Controls", "description": "Contr√¥les r√©glementaires automatis√©s"},
        {"name": "Health", "description": "Endpoints de sant√©"},
        {"name": "Root", "description": "Endpoints racine"}
    ]
)

# ============================================================================
# MIDDLEWARES
# ============================================================================

# CORS - Cross-Origin Resource Sharing
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.BACKEND_CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Compression GZIP
app.add_middleware(GZipMiddleware, minimum_size=1000)

# Trusted Host (protection contre host header attacks)
if settings.ENVIRONMENT == "production":
    app.add_middleware(
        TrustedHostMiddleware,
        allowed_hosts=settings.ALLOWED_HOSTS
    )

# Middleware de logging des requ√™tes
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """
    Log toutes les requ√™tes HTTP
    """
    start_time = time.time()
    
    # G√©n√©rer un ID de requ√™te unique
    request_id = f"{int(time.time() * 1000)}"
    
    # Logger la requ√™te entrante
    logger.info(f"üì• {request_id} - {request.method} {request.url.path}")
    
    # Traiter la requ√™te
    response = await call_next(request)
    
    # Calculer le temps de traitement
    process_time = (time.time() - start_time) * 1000
    
    # Logger la r√©ponse
    logger.info(
        f"üì§ {request_id} - Status: {response.status_code} - Time: {process_time:.2f}ms"
    )
    
    # Ajouter des headers custom
    response.headers["X-Request-ID"] = request_id
    response.headers["X-Process-Time"] = f"{process_time:.2f}ms"
    
    return response

# ============================================================================
# EXCEPTION HANDLERS
# ============================================================================

@app.exception_handler(StarletteHTTPException)
async def http_exception_handler(request: Request, exc: StarletteHTTPException):
    """
    Gestionnaire d'exceptions HTTP
    """
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": exc.detail,
            "status_code": exc.status_code,
            "timestamp": datetime.utcnow().isoformat()
        }
    )

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """
    Gestionnaire d'erreurs de validation
    """
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={
            "error": "Validation error",
            "details": exc.errors(),
            "body": exc.body,
            "timestamp": datetime.utcnow().isoformat()
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """
    Gestionnaire d'exceptions g√©n√©rales
    """
    logger.error(f"Erreur non g√©r√©e: {exc}", exc_info=True)
    
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={
            "error": "Internal server error",
            "message": str(exc) if settings.DEBUG else "An error occurred",
            "timestamp": datetime.utcnow().isoformat()
        }
    )

# ============================================================================
# ROUTES DE BASE
# ============================================================================

@app.get("/", tags=["Root"])
async def root():
    """
    Point d'entr√©e racine de l'API
    """
    return {
        "message": "Actuarial Provisioning SaaS API - Conformit√© R√©glementaire",
        "version": "1.1.0",
        "status": "online",
        "documentation": "/docs",
        "regulatory_compliance": {
            "ifrs17_support": True,
            "solvency2_support": True,
            "workflows_enabled": REGULATORY_MODULES_AVAILABLE,
            "real_time_monitoring": REGULATORY_MODULES_AVAILABLE
        },
        "timestamp": datetime.utcnow().isoformat()
    }

@app.get("/health", tags=["Health"])
async def health_check():
    """
    Health check de l'application
    """
    db_status = health_check_db()
    
    return {
        "status": "healthy" if db_status["status"] == "healthy" else "degraded",
        "version": "1.1.0",
        "timestamp": datetime.utcnow().isoformat(),
        "database": db_status["status"] == "healthy",
        "environment": settings.ENVIRONMENT,
        "regulatory_modules": REGULATORY_MODULES_AVAILABLE,
        "details": {
            "database": db_status,
            "regulatory_compliance": {
                "dashboard": REGULATORY_MODULES_AVAILABLE,
                "workflows": REGULATORY_MODULES_AVAILABLE,
                "controls": REGULATORY_MODULES_AVAILABLE
            }
        }
    }

@app.get("/info", tags=["Info"])
async def app_info():
    """
    Informations sur l'application (version √©tendue avec conformit√©)
    """
    return {
        "app_name": "Actuarial Provisioning SaaS - Conformit√© R√©glementaire",
        "version": "1.1.0",
        "environment": settings.ENVIRONMENT,
        "features": {
            "actuarial_methods": [
                "chain_ladder",
                "bornhuetter_ferguson",
                "mack",
                "cape_cod",
                "bootstrap"
            ],
            "compliance": ["IFRS 17", "Solvency II", "ACPR", "EIOPA"],
            "regulatory_features": [
                "Real-time monitoring",
                "Multi-level approval workflows", 
                "Automated regulatory controls",
                "QRT template generation",
                "Documentation automation"
            ] if REGULATORY_MODULES_AVAILABLE else [],
            "formats": ["CSV", "Excel", "JSON"],
            "languages": ["fr", "en"]
        },
        "endpoints": {
            "actuarial": {
                "triangles": "/api/v1/triangles",
                "calculations": "/api/v1/calculations",
                "results": "/api/v1/results"
            },
            "regulatory": {
                "dashboard": "/api/v1/regulatory-dashboard" if REGULATORY_MODULES_AVAILABLE else None,
                "workflows": "/api/v1/workflow" if REGULATORY_MODULES_AVAILABLE else None,
                "controls": "/api/v1/regulatory-controls" if REGULATORY_MODULES_AVAILABLE else None
            },
            "core": {
                "auth": "/api/v1/auth",
                "health": "/health",
                "docs": "/docs"
            }
        },
        "limits": {
            "max_triangle_size": 50,
            "max_calculations_per_day": 100,
            "max_file_size_mb": 10,
            "max_workflow_levels": 5
        },
        "contact": {
            "email": "support@actuarial-saas.com",
            "documentation": "https://docs.actuarial-saas.com"
        }
    }

# ============================================================================
# INCLUSION DES ROUTERS EXISTANTS
# ============================================================================

# Router d'authentification
app.include_router(
    auth.router,
    prefix="/api/v1",
    tags=["Authentication"]
)



# Router des triangles
app.include_router(
    triangles.router,
    prefix="/api/v1",
    tags=["Triangles"]
)

# Router des calculs
app.include_router(
    calculations.router,
    prefix="/api/v1",
    tags=["Calculations"]
)

# Router des exports
app.include_router(
    exports.router,
    prefix="/api/v1",
    tags=["Exports"]
)

# Router conformit√© IFRS17 / Solvency II
app.include_router(
    compliance.router,
    prefix="/api/v1",
    tags=["Compliance"]
)

# Router de benchmarking des m√©thodes
app.include_router(
    benchmarking.router,
    prefix="/api/v1",
    tags=["Benchmarking"]
)

# Routers simplifi√©s
app.include_router(triangles_simple.router, prefix="/api/v1", tags=["Triangles Simple"])
app.include_router(calculations_simple.router, prefix="/api/v1", tags=["Calculations Simple"])
app.include_router(results.router, prefix="/api/v1", tags=["Results"])

# ============================================================================
# INCLUSION DES NOUVEAUX ROUTERS R√âGLEMENTAIRES
# ============================================================================

if REGULATORY_MODULES_AVAILABLE:
    logger.info("üîÑ Chargement des routers r√©glementaires...")
    
    # Router Dashboard R√©glementaire
    try:
        app.include_router(
            regulatory_dashboard.router,
            prefix="/api/v1/regulatory-dashboard",
            tags=["Regulatory Dashboard"]
        )
        logger.info("‚úÖ Router Dashboard R√©glementaire charg√©")
    except Exception as e:
        logger.error(f"‚ùå Erreur Router Dashboard R√©glementaire: {e}")
    
    # Router Workflows
    try:
        app.include_router(
            workflow.router,
            prefix="/api/v1/workflow", 
            tags=["Workflow"]
        )
        logger.info("‚úÖ Router Workflows charg√©")
    except Exception as e:
        logger.error(f"‚ùå Erreur Router Workflows: {e}")
    
    # Router Contr√¥les R√©glementaires
    try:
        app.include_router(
            regulatory_controls.router,
            prefix="/api/v1/regulatory-controls",
            tags=["Regulatory Controls"]
        )
        logger.info("‚úÖ Router Contr√¥les R√©glementaires charg√©")
    except Exception as e:
        logger.error(f"‚ùå Erreur Router Contr√¥les R√©glementaires: {e}")
        
    logger.info("üéØ Tous les modules r√©glementaires charg√©s avec succ√®s")
else:
    logger.warning("‚ö†Ô∏è Modules r√©glementaires d√©sactiv√©s - fonctionnalit√©s de base uniquement")

# ============================================================================
# ROUTES DE MONITORING
# ============================================================================

@app.get("/api/v1/monitoring/metrics", tags=["Monitoring"])
async def get_metrics():
    """
    M√©triques de performance de l'application
    """
    from app.core.database import get_performance_metrics
    metrics = get_performance_metrics()
    
    # Ajouter m√©triques r√©glementaires si disponibles
    if REGULATORY_MODULES_AVAILABLE:
        metrics["regulatory"] = {
            "workflows_active": True,
            "controls_running": True,
            "compliance_monitoring": True
        }
    
    return metrics

@app.get("/api/v1/monitoring/database", tags=["Monitoring"])
async def database_status():
    """
    Status d√©taill√© de la base de donn√©es
    """
    return health_check_db()

@app.get("/api/v1/monitoring/regulatory", tags=["Monitoring"])
async def regulatory_status():
    """
    Status des modules r√©glementaires
    """
    if not REGULATORY_MODULES_AVAILABLE:
        return {"status": "disabled", "message": "Modules r√©glementaires non disponibles"}
    
    return {
        "status": "active",
        "modules": {
            "regulatory_dashboard": True,
            "workflow_system": True,
            "regulatory_controls": True
        },
        "last_check": datetime.utcnow().isoformat(),
        "compliance_score": 87.5,  # Simulation
        "active_workflows": 3,     # Simulation
        "pending_approvals": 2     # Simulation
    }

# ============================================================================
# ROUTES DEBUG (d√©veloppement uniquement)
# ============================================================================

if settings.ENVIRONMENT == "development":
    @app.get("/api/debug/routes", tags=["Debug"])
    async def debug_routes():
        """
        Debug des routes disponibles (d√©veloppement uniquement)
        """
        routes = []
        regulatory_routes = []
        
        for route in app.routes:
            if hasattr(route, 'methods') and hasattr(route, 'path'):
                route_info = {
                    "path": route.path,
                    "methods": list(route.methods) if route.methods else [],
                    "name": getattr(route, 'name', 'unnamed')
                }
                routes.append(route_info)
                
                # Identifier les routes r√©glementaires
                if any(keyword in route.path for keyword in ["/regulatory-dashboard", "/workflow", "/regulatory-controls"]):
                    regulatory_routes.append(route_info)
        
        return {
            "total_routes": len(routes),
            "regulatory_routes_count": len(regulatory_routes),
            "regulatory_modules_available": REGULATORY_MODULES_AVAILABLE,
            "regulatory_routes": regulatory_routes,
            "all_routes": routes
        }

# ============================================================================
# CONFIGURATION POUR D√âVELOPPEMENT
# ============================================================================

if __name__ == "__main__":
    import uvicorn
    
    logger.info("üöÄ Lancement du serveur en mode d√©veloppement")
    logger.info("üìã Conformit√© R√©glementaire IFRS 17 & Solvabilit√© II")
    
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="debug" if settings.DEBUG else "info"
    )